type token =
  | AND
  | TRUE
  | FALSE
  | NOT
  | OR
  | EQ
  | LPAREN
  | RPAREN
  | BID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  257 (* AND *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* NOT *);
  261 (* OR *);
  262 (* EQ *);
  263 (* LPAREN *);
  264 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  265 (* BID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\002\000\003\000\003\000\003\000\001\000\
\001\000\003\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\002\000\000\000\000\000\009\000\012\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\001\000\
\000\000\007\000\000\000\000\000\005\000\006\000\010\000\000\000\
\011\000"

let yydgoto = "\002\000\
\008\000\009\000\010\000"

let yysindex = "\005\000\
\001\255\000\000\000\000\000\000\001\255\001\255\000\000\000\000\
\002\000\003\255\000\000\011\255\023\255\001\255\001\255\000\000\
\013\255\000\000\013\255\025\255\000\000\000\000\000\000\023\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\020\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\009\000\250\255"

let yytablesize = 265
let yytable = "\013\000\
\008\000\016\000\003\000\004\000\005\000\001\000\020\000\006\000\
\017\000\007\000\023\000\014\000\024\000\011\000\012\000\015\000\
\000\000\020\000\018\000\019\000\008\000\007\000\021\000\022\000\
\008\000\000\000\000\000\008\000\017\000\019\000\017\000\007\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\014\000\000\000\000\000\008\000\015\000\000\000\
\008\000"

let yycheck = "\006\000\
\000\000\000\000\002\001\003\001\004\001\001\000\013\000\007\001\
\006\001\009\001\017\000\001\001\019\000\005\000\006\000\005\001\
\255\255\024\000\008\001\007\001\001\001\009\001\014\000\015\000\
\005\001\255\255\255\255\008\001\006\001\007\001\006\001\009\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\001\001\255\255\255\255\005\001\005\001\255\255\
\008\001"

let yynames_const = "\
  AND\000\
  TRUE\000\
  FALSE\000\
  NOT\000\
  OR\000\
  EQ\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clForm) in
    Obj.repr(
# 17 "src/ClParser.mly"
                            ( _1 )
# 160 "src/ClParser.ml"
               : ClAst.clForm))
; (fun __caml_parser_env ->
    Obj.repr(
# 21 "src/ClParser.mly"
                                        ( ClAst.False )
# 166 "src/ClParser.ml"
               : 'clForm))
; (fun __caml_parser_env ->
    Obj.repr(
# 22 "src/ClParser.mly"
                                        ( ClAst.True )
# 172 "src/ClParser.ml"
               : 'clForm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'clForm) in
    Obj.repr(
# 23 "src/ClParser.mly"
                                        ( ClAst.Not (_2) )
# 179 "src/ClParser.ml"
               : 'clForm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'clForm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clForm) in
    Obj.repr(
# 24 "src/ClParser.mly"
                                        ( ClAst.And (_1, _3) )
# 187 "src/ClParser.ml"
               : 'clForm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'clForm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clForm) in
    Obj.repr(
# 25 "src/ClParser.mly"
                                        ( ClAst.Or (_1,_3) )
# 195 "src/ClParser.ml"
               : 'clForm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'clForm) in
    Obj.repr(
# 26 "src/ClParser.mly"
                                        ( _2 )
# 202 "src/ClParser.ml"
               : 'clForm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 27 "src/ClParser.mly"
                                        ( ClAst.Atom(_1) )
# 209 "src/ClParser.ml"
               : 'clForm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 30 "src/ClParser.mly"
         ( ClAst.Id (_1) )
# 216 "src/ClParser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 31 "src/ClParser.mly"
                  ( ClAst.Eq (_1,_3) )
# 224 "src/ClParser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 32 "src/ClParser.mly"
                            ( ClAst.App (_2,_3) )
# 232 "src/ClParser.ml"
               : 'term))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ClAst.clForm)
