### Starting build.
# Target: src/closure.ml.depends, tags: { package(unix), extension:ml, file:src/closure.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/closure.ml > src/closure.ml.depends
# Target: src/ClAst.ml.depends, tags: { package(unix), extension:ml, file:src/ClAst.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/ClAst.ml > src/ClAst.ml.depends
# Target: src/ClLexer.mll, tags: { package(unix), extension:mll, file:src/ClLexer.mll, lexer, ocaml, ocamllex, quiet, traverse }
/home/delour/.opam/4.04.0/bin/ocamllex.opt -q src/ClLexer.mll
# Target: src/ClLexer.ml.depends, tags: { package(unix), extension:ml, file:src/ClLexer.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/ClLexer.ml > src/ClLexer.ml.depends
# Target: src/ClParser.mly, tags: { package(unix), extension:mly, file:src/ClParser.mly, infer, ocaml, ocamlyacc, parser, quiet, traverse }
/home/delour/.opam/4.04.0/bin/ocamlyacc src/ClParser.mly
# Target: src/ClParser.mli.depends, tags: { package(unix), extension:mli, file:src/ClParser.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/ClParser.mli > src/ClParser.mli.depends
# Target: src/ClAst.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/ClAst.cmo, file:src/ClAst.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/ClAst.cmo src/ClAst.ml
# Target: src/ClParser.cmi, tags: { package(unix), byte, compile, extension:mli, file:src/ClParser.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/ClParser.cmi src/ClParser.mli
# Target: src/ClPrinter.ml.depends, tags: { package(unix), extension:ml, file:src/ClPrinter.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/ClPrinter.ml > src/ClPrinter.ml.depends
# Target: src/ClLexer.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/ClLexer.cmo, file:src/ClLexer.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/ClLexer.cmo src/ClLexer.ml
# Target: src/ClPrinter.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/ClPrinter.cmo, file:src/ClPrinter.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/ClPrinter.cmo src/ClPrinter.ml
# Target: src/closure.cmo, tags: { package(unix), byte, compile, extension:cmo, extension:ml, file:src/closure.cmo, file:src/closure.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -I src -o src/closure.cmo src/closure.ml
# Target: src/ClParser.ml.depends, tags: { package(unix), extension:ml, file:src/ClParser.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -modules src/ClParser.ml > src/ClParser.ml.depends
# Target: src/ClAst.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/ClAst.cmx, file:src/ClAst.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/ClAst.cmx src/ClAst.ml
# Target: src/ClParser.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/ClParser.cmx, file:src/ClParser.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/ClParser.cmx src/ClParser.ml
# Target: src/ClLexer.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/ClLexer.cmx, file:src/ClLexer.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/ClLexer.cmx src/ClLexer.ml
# Target: src/ClPrinter.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/ClPrinter.cmx, file:src/ClPrinter.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/ClPrinter.cmx src/ClPrinter.ml
# Target: src/closure.cmx, tags: { package(unix), compile, extension:cmx, extension:ml, file:src/closure.cmx, file:src/closure.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package unix -I src -o src/closure.cmx src/closure.ml
# Target: src/closure.native, tags: { package(unix), dont_link_with, extension:native, file:src/closure.native, link, native, ocaml, program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package unix -I src src/ClAst.cmx src/ClParser.cmx src/ClLexer.cmx src/ClPrinter.cmx src/closure.cmx -o src/closure.native
# Compilation successful.
